(in-package :fcg)

(deftest test-anti-unification-basic ()
  ;; tests the correct behaviour of anti-unification
  (test-assert (equivalent-meaning? '(a b c)
                                    (anti-unify '(a b c) '(a b c) :equal-feature-name-and-arity)
                                    :unify-with-instantiated-variables))
  
  (test-assert (equivalent-meaning? '(a b c)
                                    (anti-unify '(a b c) '(a b c) :no-restrictions)
                                    :unify-with-instantiated-variables))
  
  (test-assert (equivalent-meaning? '(a (b ?var) d)
                                    (anti-unify '(a (b c) d) '(a (b x) d) :equal-feature-name-and-arity)
                                    :unify-with-instantiated-variables))
  
  (test-assert (equivalent-meaning? '(a (b ?var) d)
                                    (anti-unify '(a (b c) d) '(a (b x) d) :no-restrictions)
                                    :unify-with-instantiated-variables))
  
  (test-assert (equivalent-meaning? '(a ?var d)
                                    (anti-unify '(a (b c) d) '(a (x c) d) :equal-feature-name-and-arity)
                                    :unify-with-instantiated-variables))
 
  (test-assert (equivalent-meaning? '(a (?var c) d)
                                    (anti-unify '(a (b c) d) '(a (x c) d) :no-restrictions)
                                    :unify-with-instantiated-variables))
  
  (test-assert (equivalent-meaning? '(a (b ?var) (d ?var) ?var2)
                                    (anti-unify '(a (b c) (d c) f) '(a (b x) (d x) g) :equal-feature-name-and-arity)
                                    :unify-with-instantiated-variables))

  (test-assert (equivalent-meaning? '(a (b ?var) (d ?var) ?var2)
                                    (anti-unify '(a (b c) (d c) f) '(a (b x) (d x) g) :no-restrictions)
                                    :unify-with-instantiated-variables)))

;; (test-anti-unification-basic)

(deftest test-anti-unification-auxiliary-fns ()
  (let ((solutions (find-matching-units
                    '((?unit-1 (syn-cat x))
                      (?unit-2 (syn-cat y)))
                    '((?unit-A (syn-cat z))
                      (?unit-B (syn-cat y))
                      (?unit-C (syn-cat x))) '((non-matching-unit 5) (removed-pattern-unit 15)))))
    (test-assert (eq (length solutions) 1))
    (test-assert (equal '((1 . 3) (2 . 2)) (solution-structure (first solutions))))
    (test-assert (eq 0 (cost (first solutions)))))

  (let ((solutions (find-matching-units
                    '((?unit-1 (syn-cat x))
                      (?unit-2 (syn-cat c)))
                    '((?unit-A (syn-cat z))
                      (?unit-B (syn-cat y))
                      (?unit-C (syn-cat x))) '((non-matching-unit 5) (removed-pattern-unit 15)))))
    (test-assert (eq (length solutions) 3))
    (test-assert (eq 15 (cost (first solutions))))
    (test-assert (eq 5 (cost (second solutions))))
    (test-assert (eq 5 (cost (second solutions)))))

  (let ((solutions (find-matching-units
                    '((?unit-1 (syn-cat x))
                      (?unit-2 (syn-cat c))
                      (?unit-3 (syn-cat p)))
                    '((?unit-A (syn-cat z))
                      (?unit-B (syn-cat y))
                      (?unit-C (syn-cat x))) '((non-matching-unit 5) (removed-pattern-unit 15)))))
    (test-assert (eq (length solutions) 6))
    (test-assert (eq 20 (cost (first solutions))))
    (test-assert (eq 10 (cost (last-elt solutions)))))

  (let ((solutions (find-matching-units
                    '((?unit-1 (syn-cat x))
                      (?unit-2 (syn-cat c))
                      (?unit-3 (syn-cat p)))
                    '((?unit-A (syn-cat p))
                      (?unit-B (syn-cat y))
                      (?unit-C (syn-cat x))) '((non-matching-unit 5) (removed-pattern-unit 15)))))
    (test-assert (eq (length solutions) 2))
    (test-assert (eq 15 (cost (first solutions))))
    (test-assert (eq 5 (cost (second solutions)))))

  (let ((solutions (find-matching-units
                    '((?unit-1 (syn-cat x))
                      (?unit-2 (syn-cat c))
                      (?unit-3 (syn-cat p)))
                    '((?unit-A (syn-cat z))
                      (?unit-B (syn-cat y))
                      (?unit-C (syn-cat x))) '((non-matching-unit 5) (removed-pattern-unit 15)))))
    (test-assert (eq (length solutions) 6))
    (test-assert (eq 20 (cost (first solutions))))
    (test-assert (eq 10 (cost (last-elt solutions))))))

;; (test-anti-unification-auxiliary-fns)

(deftest test-anti-unification-fcg ()
  ;; exact pattern
  (let ((a-u-result (first (anti-unify '((?unit-1 (syn-cat a)
                                                  (sem-cat b))
                                         (?unit-2 (syn-cat c)
                                                  (sem-cat d)))
                                       '((?unit-A (syn-cat a)
                                                  (sem-cat b))
                                         (?unit-C (syn-cat c)
                                                  (sem-cat d))) :fcg))))
    
    (test-assert (equivalent-meaning? (first a-u-result)
                                      '((?unit-1 (syn-cat a)
                                                 (sem-cat b))
                                        (?unit-2 (syn-cat c)
                                                 (sem-cat d)))
                                      :unify-with-instantiated-variables)))
    
  ;; top-level features: subset
  (let ((a-u-result (first (anti-unify '((?unit-1 (syn-cat a)
                                                  (sem-cat b))
                                         (?unit-2 (syn-cat c)
                                                  (sem-cat d)))
                                       '((?unit-A (syn-cat a)
                                                  (sem-cat b))
                                         (?unit-C (sem-cat d)
                                                  (syn-cat c))) :fcg))))
    (test-assert (equivalent-meaning? (first a-u-result)
                                      '((?unit-1 (syn-cat a)
                                                 (sem-cat b))
                                        (?unit-2 (syn-cat c)
                                                 (sem-cat d)))
                                      :unify-with-instantiated-variables)))
    
  ;; extra unit
  (let ((a-u-result (first (anti-unify '((?unit-1 (syn-cat a)
                                                  (sem-cat b))
                                         (?unit-2 (syn-cat c)
                                                  (sem-cat d)))
                                       '((?unit-A (syn-cat a)
                                                  (sem-cat b))
                                         (?unit-B (syn-cat x))
                                         (?unit-C (sem-cat d)
                                                  (syn-cat c))) :fcg))))
    
    (test-assert (equivalent-meaning? (first a-u-result)
                                      '((?unit-1 (syn-cat a)
                                                 (sem-cat b))
                                        (?unit-2 (syn-cat c)
                                                 (sem-cat d)))
                                      :unify-with-instantiated-variables)))

  ;; extra top-level-feature
  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat a)
                                            (sem-cat b))
                                   (?unit-2 (syn-cat c)
                                            (sem-cat d)
                                            (footprints (==0 x))))
                                 '((?unit-A (syn-cat a)
                                            (sem-cat b))
                                   (?unit-B (syn-cat x))
                                   (?unit-C (sem-cat d)
                                            (syn-cat c))) :fcg))
         (s1 (first a-u-result)))
    
    (test-assert (equivalent-meaning? (first s1)
                                      '((?unit-1 (syn-cat a)
                                                 (sem-cat b))
                                        (?unit-2 (syn-cat c)
                                                 (sem-cat d)
                                                 (footprints (y))))
                                      :unify-with-instantiated-variables)))

  ;; Subset operator
  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class a)
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d))))
                                   (?unit-2 (syn-cat (==1 (class e)
                                                          (type f)))
                                            (sem-cat (==1 (class g)
                                                          (type h)))))
                                 '((?unit-1 (syn-cat ((class a)
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type d))))
                                   (?unit-2 (syn-cat ((class e)
                                                      (type f)
                                                      (other x)))
                                            (sem-cat ((other y)
                                                      (type h)
                                                      (class g))))) :fcg))
         (s1 (first a-u-result)))
    
    (test-assert (equivalent-meaning? (first s1)
                                      '((?unit-1 (syn-cat ((class a)
                                                           (type b)))
                                                 (sem-cat ((function c)
                                                           (type d))))
                                        (?unit-2 (syn-cat ((class e)
                                                           (type f)))
                                                 (sem-cat ((class g)
                                                           (type h)))))
                                      :unify-with-instantiated-variables)))
  
  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class a)
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d))))
                                   (?unit-2 (syn-cat (==1 (class e)
                                                          (type f)))
                                            (sem-cat (==1 (class g)
                                                          (type h)))))
                                 '((?unit-1 (syn-cat ((class a)
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type d))))
                                   (?unit-2 (syn-cat ((class e)
                                                      (type f)
                                                      (other x)))
                                            (sem-cat ((other y)
                                                      (type h)
                                                      (class wrong-class))))) :fcg))
         (s1 (first a-u-result)))

    (test-assert (equivalent-meaning? (first s1)
                                      '((?unit-1 (syn-cat ((class a)
                                                           (type b)))
                                                 (sem-cat ((function c)
                                                           (type d))))
                                        (?unit-2 (syn-cat ((class e)
                                                           (type f)))
                                                 (sem-cat ((class ?var)
                                                           (type h)))))
                                      :unify-with-instantiated-variables)))

  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class a)
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d))))
                                   (?unit-2 (syn-cat (==1 (class e)
                                                          (type f)))
                                            (sem-cat (==1 (class (==1 (property z)))
                                                          (type h)))))
                                 '((?unit-1 (syn-cat ((class a)
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type d))))
                                   (?unit-2 (syn-cat ((class e)
                                                      (type f)
                                                      (other x)))
                                            (sem-cat ((other y)
                                                      (type h)
                                                      (class ((property d))))))) :fcg))
         (s1 (first a-u-result)))
    
    (test-assert (equivalent-meaning? (first s1)
                                      '((?unit-1 (syn-cat ((class a)
                                                           (type b)))
                                                 (sem-cat ((function c)
                                                           (type d))))
                                        (?unit-2 (syn-cat ((class e)
                                                           (type f)))
                                                 (sem-cat ((class ((property ?var)))
                                                           (type h)))))
                                      :unify-with-instantiated-variables)))

  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class a)
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d))))
                                   (?unit-2 (syn-cat (==1 (class e)
                                                          (type f)))
                                            (sem-cat (==1 (class (==1 (some property)))
                                                          (type h)))))
                                 '((?unit-1 (syn-cat ((class a)
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type d))))
                                   (?unit-2 (syn-cat ((class e)
                                                      (type f)
                                                      (other x)))
                                            (sem-cat ((other y)
                                                      (type h)
                                                      (class ((property d))))))) :fcg))
         (s1 (first a-u-result)))
    (test-assert (equivalent-meaning? (first s1)
                                      '((?unit-1 (syn-cat ((class a)
                                                           (type b)))
                                                 (sem-cat ((function c)
                                                           (type d))))
                                        (?unit-2 (syn-cat ((class e)
                                                           (type f)))
                                                 (sem-cat ((class ?var)
                                                           (type h)))))
                                      :unify-with-instantiated-variables)))

  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class (==0 (feature a)))
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d)))))
                                 '((?unit-A (syn-cat ((class ((feature a)))
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type d))))) :fcg))
         (s1 (first a-u-result)))

    (test-assert (equivalent-meaning? (first s1)
                                      '((?unit-1 (syn-cat ((class ?var)
                                                           (type b)))
                                                 (sem-cat ((function c)
                                                           (type d)))))
                                      :unify-with-instantiated-variables)))

  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class (==0 (feature a)))
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d)))))
                                 '((?unit-A (syn-cat ((class ((feature b)))
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type d))))) :fcg))
         (s1 (first a-u-result)))
    (test-assert (equivalent-meaning? (first s1)
                                      '((?unit-1 (syn-cat ((class ())
                                                           (type b)))
                                                 (sem-cat ((function c)
                                                           (type d)))))
                                      :unify-with-instantiated-variables))))

;; (test-anti-unification-fcg)

(deftest test-anti-unification-cost ()
  ;; anti-unifying a unifying structure: no cost
  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class (== (feature a)))
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d)))))
                                 '((?unit-A (syn-cat ((class ((feature a)))
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type d)))))
                                 :fcg
                                 +no-bindings+
                                 +no-bindings+
                                 :cost-params '((equality 0)
                                                (non-matching-unit 10)
                                                (subst-from-bindingslist 0)
                                                (source-variable-pattern-in-bindingslist 0)
                                                (replace-by-new-var depth-of-replaced-pattern 1)
                                                (discarded-feature 5)
                                                (discarded-negated-feature 4)
                                                (removed-pattern-unit 15))))
         (s1 (first a-u-result)))
    (test-assert (eq 0 (fifth s1))))

  ;; anti-unifying a unifying structure: no cost
  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class (== (feature a)))
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d)))))
                                 '((?unit-A (syn-cat ((class ((feature a)))
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type d))))
                                   (?unit-B (syn-cat ((class ((feature d)))
                                                      (type e)))
                                            (sem-cat ((function f)
                                                      (type g)))))
                                 :fcg
                                 +no-bindings+
                                 +no-bindings+
                                 :cost-params '((equality 0)
                                                (non-matching-unit 10)
                                                (subst-from-bindingslist 0)
                                                (source-variable-pattern-in-bindingslist 0)
                                                (replace-by-new-var depth-of-replaced-pattern 1)
                                                (discarded-feature 5)
                                                (discarded-negated-feature 4)
                                                (removed-pattern-unit 15))))
         (s1 (first a-u-result)))
    (test-assert (eq 0 (fifth s1))))

  ;; One non-matching unit, one non-matching-simple value, one unit in ts
  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class (== (feature a)))
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d)))))
                                 '((?unit-A (syn-cat ((class ((feature a)))
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type x)))))
                                 :fcg
                                 +no-bindings+
                                 +no-bindings+
                                 :cost-params '((equality 0)
                                                (non-matching-unit 10)
                                                (subst-from-bindingslist 0)
                                                (source-variable-pattern-in-bindingslist 0)
                                                (replace-by-new-var depth-of-replaced-pattern 1)
                                                (discarded-feature 5)
                                                (discarded-negated-feature 4)
                                                (removed-pattern-unit 15))))
         (s1 (first a-u-result)))
    (test-assert (eq 11 (fifth s1))))

  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class (== (feature a)))
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d)))))
                                 '((?unit-A (syn-cat ((class ((feature a)))
                                                      (type b)))
                                            (sem-cat ((function c)
                                                      (type x))))
                                   (?unit-B (syn-cat ((class ((feature d)))
                                                      (type e)))
                                            (sem-cat ((function f)
                                                      (type g)))))
                                 :fcg
                                 +no-bindings+
                                 +no-bindings+
                                 :cost-params '((equality 0)
                                                (non-matching-unit 10)
                                                (subst-from-bindingslist 0)
                                                (source-variable-pattern-in-bindingslist 0)
                                                (replace-by-new-var depth-of-replaced-pattern 1)
                                                (discarded-feature 5)
                                                (discarded-negated-feature 4)
                                                (removed-pattern-unit 15))))
         (s1 (first a-u-result)))
    (test-assert (eq 11 (fifth s1))))

  ;; Two different values
  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class (== (feature a)))
                                                          (type b)))
                                            (sem-cat (==1 (function c)
                                                          (type d)))))
                                 '((?unit-A (syn-cat ((class ((feature a)))
                                                      (type y)))
                                            (sem-cat ((function c)
                                                      (type x))))
                                   (?unit-B (syn-cat ((class ((feature d)))
                                                      (type e)))
                                            (sem-cat ((function f)
                                                      (type g)))))
                                 :fcg
                                 +no-bindings+
                                 +no-bindings+
                                 :cost-params '((equality 0)
                                                (non-matching-unit 10)
                                                (subst-from-bindingslist 0)
                                                (source-variable-pattern-in-bindingslist 0)
                                                (replace-by-new-var depth-of-replaced-pattern 1)
                                                (discarded-feature 5)
                                                (discarded-negated-feature 4)
                                                (removed-pattern-unit 15))))
         (s1 (first a-u-result))
         (s2 (second a-u-result)))
    (test-assert (eq 12 (fifth s1)))
    (test-assert (eq 14 (fifth s2))))

  ;; Previous + discarded feature
  (let* ((a-u-result (anti-unify '((?unit-1 (syn-cat (==1 (class (== (feature a)))
                                                          (type b)
                                                          (discarded feat)))
                                            (sem-cat (==1 (function c)
                                                          (type d)))))
                                 '((?unit-A (syn-cat ((class ((feature a)))
                                                      (type y)))
                                            (sem-cat ((function c)
                                                      (type x))))
                                   (?unit-B (syn-cat ((class ((feature d)))
                                                      (type e)))
                                            (sem-cat ((function f)
                                                      (type g)))))
                                 :fcg
                                 +no-bindings+
                                 +no-bindings+
                                 :cost-params '((equality 0)
                                                (non-matching-unit 10)
                                                (subst-from-bindingslist 0)
                                                (source-variable-pattern-in-bindingslist 0)
                                                (replace-by-new-var depth-of-replaced-pattern 1)
                                                (discarded-feature 5)
                                                (discarded-negated-feature 4)
                                                (removed-pattern-unit 15))))
         (s1 (first a-u-result)))
    (test-assert (eq 17 (fifth s1)))))

;; (test-anti-unification-cost)
